name: deploy [DOCKER-COMPOSE]
description: copy by ssh sources to remote and runs compose docker command

inputs:
  ssh_private_key:
    required: true
    description: ''
  ssh_private_host:
    required: true
    description: ''
  ssh_private_port:
    required: true
    description: ''
  ssh_private_user:
    required: true
    description: ''

  domain_name:
    required: true
    description: 'domain name for project ${DOMAIN_NAME}.wlg.tv'
  target_service:
    required: false
    description: 'service name of docker-compose.yml for proxy'
  target_port:
    required: false
    description: 'service port of docker-compose.yml for proxy'

runs:
  using: composite
  steps:
    - id: ssh
      name: create ssh configuration
      shell: bash
      env:
        SSH_RSA_ID: ~/.ssh/id_rsa
      run: |
        echo ""
        echo "========== SSH CONNECTION KEYS =========="
        echo ""
        
        mkdir -p ~/.ssh
        echo "${{ inputs.ssh_private_key }}" > ${{ env.SSH_RSA_ID }}
        chmod 600 ${{ env.SSH_RSA_ID }}
        cat <<EOF >> ~/.ssh/config
        Host sshserver
            HostName ${{ inputs.ssh_private_host }}
            User ${{ inputs.ssh_private_user }}
            Port ${{ inputs.ssh_private_port }}
            IdentityFile ${{ env.SSH_RSA_ID }}
        EOF
        ssh-keyscan -H ${{ inputs.ssh_private_host }} >> ~/.ssh/known_hosts

    - id: copy
      name: copy files fia ssh
      shell: bash
      env:
        TARGET_PATH: /data/compose/${{ github.event.repository.name }}
      run: |
        echo ""
        echo "========== COPY REPOSITORY TO REMOTE =========="
        echo ""

        ssh -o StrictHostKeyChecking=no sshserver "rm -rf ${{ env.TARGET_PATH }}"
        ssh -o StrictHostKeyChecking=no sshserver "mkdir -p ${{ env.TARGET_PATH }}"
        scp -o StrictHostKeyChecking=no -r ./ sshserver:${{ env.TARGET_PATH }}/

    - id: network
      name: init docker network
      shell: bash
      env:
        REPOSITORY_NAME: ${{ github.event.repository.name }}
        BRANCH_NAME: ${{ github.ref_name }}
        INPUT_DOMAIN_NAME: ${{ inputs.domain_name }}
      run: |
        echo ""
        echo "========== CREATE DOCKER NETWORK =========="
        echo ""
        
        NETWORK_NAME=proxy-${{ env.REPOSITORY_NAME }}-network
        DOMAIN_NAME=${{ env.INPUT_DOMAIN_NAME }}
        if [ "${{ env.BRANCH_NAME }}" != "master" ]; then
          NETWORK_NAME=$NETWORK_NAME-dev
          DOMAIN_NAME=$DOMAIN_NAME.dev
          echo "NETWORK NAME DEV = $NETWORK_NAME"
        fi
        DOMAIN_NAME=$DOMAIN_NAME.wlg.tv
        echo "name=$NETWORK_NAME" >> $GITHUB_OUTPUT
        echo "domain=$DOMAIN_NAME" >> $GITHUB_OUTPUT
        echo "NETWORK NAME = $NETWORK_NAME"
        echo "DOMAIN NAME = $DOMAIN_NAME"
        
        ssh -o StrictHostKeyChecking=no sshserver << EOF
          # Check if the Docker network exists; if not, create it
          if ! docker network inspect "$NETWORK_NAME" >/dev/null 2>&1; then
            docker network create "$NETWORK_NAME"
            echo "CREATED: Docker network - $NETWORK_NAME"
          else
            echo "EXIST: Docker network present - $NETWORK_NAME"
          fi
        
          # Connect all containers with 'traefik' image to created network
          for container in \$(docker ps --format '{{.ID}}'); do
            IMAGE=\$(docker inspect -f '{{.Config.Image}}' "\$container")
            if echo "\$IMAGE" | grep -qi 'traefik'; then
              if ! docker inspect -f '{{json .NetworkSettings.Networks}}' "\$container" | grep -q "$NETWORK_NAME"; then
                docker network connect "$NETWORK_NAME" "\$container"
                echo "CONNECTED: container to -> $NETWORK_NAME : \$(docker inspect -f '{{.Name}}' \$container)"
              else
                echo "EXISTED: already in -> $NETWORK_NAME : \$(docker inspect -f '{{.Name}}' \$container)"
              fi
            fi
          done
        EOF
        

# BACKUP DATA
#
#    - id: copy
#      name: copy files fia ssh
#      shell: bash
#      run: |
#        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -l ${{ inputs.ssh_private_user }} -p ${{ inputs.ssh_private_port }} ${{ inputs.ssh_private_host }} "mkdir -p /data/compose/cover/"
#        rsync -avz --exclude './src' -e "ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -p ${{ inputs.ssh_private_port }}" ./ ${{ inputs.ssh_private_user }}@${{ inputs.ssh_private_host }}:/data/compose/cover/

# -> create network (with traefik inside)
# -> copy sources by ssh (copies well)
# -> generate docker-compose.override.yml
# -> execute docker compose up -d